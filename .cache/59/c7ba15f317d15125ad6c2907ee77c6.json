{"id":"j2CJ","dependencies":[{"name":"/Users/amylo/Desktop/censussurveys/package.json","includedInParent":true,"mtime":1610382211092},{"name":"/Users/amylo/Desktop/censussurveys/node_modules/lodash/package.json","includedInParent":true,"mtime":1610382210689},{"name":"./_baseClone","loc":{"line":1,"column":24},"parent":"/Users/amylo/Desktop/censussurveys/node_modules/lodash/clone.js","resolved":"/Users/amylo/Desktop/censussurveys/node_modules/lodash/_baseClone.js"}],"generated":{"js":"var e=require(\"./_baseClone\"),r=4;function n(n){return e(n,r)}module.exports=n;"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/lodash/clone.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/lodash/clone.js","original":{"line":1,"column":0},"generated":{"line":1,"column":4}},{"source":"node_modules/lodash/clone.js","original":{"line":1,"column":0},"generated":{"line":1,"column":6}},{"source":"node_modules/lodash/clone.js","original":{"line":1,"column":0},"generated":{"line":1,"column":14}},{"source":"node_modules/lodash/clone.js","original":{"line":4,"column":0},"generated":{"line":1,"column":30}},{"source":"node_modules/lodash/clone.js","original":{"line":4,"column":0},"generated":{"line":1,"column":32}},{"source":"node_modules/lodash/clone.js","original":{"line":32,"column":0},"generated":{"line":1,"column":34}},{"source":"node_modules/lodash/clone.js","original":{"line":32,"column":0},"generated":{"line":1,"column":43}},{"source":"node_modules/lodash/clone.js","original":{"line":32,"column":0},"generated":{"line":1,"column":45}},{"source":"node_modules/lodash/clone.js","original":{"line":33,"column":0},"generated":{"line":1,"column":48}},{"source":"node_modules/lodash/clone.js","original":{"line":33,"column":0},"generated":{"line":1,"column":55}},{"source":"node_modules/lodash/clone.js","original":{"line":33,"column":0},"generated":{"line":1,"column":57}},{"source":"node_modules/lodash/clone.js","original":{"line":33,"column":0},"generated":{"line":1,"column":59}},{"source":"node_modules/lodash/clone.js","original":{"line":36,"column":0},"generated":{"line":1,"column":62}},{"source":"node_modules/lodash/clone.js","original":{"line":36,"column":0},"generated":{"line":1,"column":69}},{"source":"node_modules/lodash/clone.js","original":{"line":36,"column":0},"generated":{"line":1,"column":77}}],"sources":{"node_modules/lodash/clone.js":"var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = clone;\n"},"lineCount":null}},"error":null,"hash":"1a9b6b43d93455edd6dd83a46068b237","cacheData":{"env":{}}}